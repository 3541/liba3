name: Build and test

on:
  workflow_dispatch:
  push:
    paths:
      - '**/*.c'
      - '**/*.h'
      - '**/*.cc'
      - '**/*.hh'
      - '.github/workflows/build.yml'
      - '**/meson.build'
      - 'extern/liba3'
      - 'boilerplate'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        architecture: [amd64, s390x, arm, ppc]
        include:
          - os: windows-latest
            c_compiler: cl
            cxx_compiler: cl
        exclude:
          - os: windows-latest
            architecture: s390x
          - os: macos-latest
            architecture: s390x
          - os: windows-latest
            architecture: arm
          - os: macos-latest
            architecture: arm
          - os: windows-latest
            architecture: ppc
          - os: macos-latest
            architecture: ppc
    env:
      CC: ${{ matrix.c_compiler }}
      CXX: ${{ matrix.cxx_compiler }}
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'

    - name: Remove link.exe
      if: runner.os == 'Windows'
      run: rm -f /usr/bin/link.exe

    - name: Install dependencies.
      run: pip install meson ninja

    - name: Fixup cross triple quirks.
      if: matrix.os == 'ubuntu-latest' && matrix.architecture != 'amd64'
      id: cross
      run: |
        case "${{ matrix.architecture }}" in
            arm)
                echo "DEB_ARCH=armel" >> $GITHUB_ENV
                echo "CROSS_TRIPLE=arm-linux-gnueabi" >> $GITHUB_ENV
                ;;
            ppc)
                echo "DEB_ARCH=powerpc" >> $GITHUB_ENV
                echo "CROSS_TRIPLE=powerpc-linux-gnu" >> $GITHUB_ENV
                ;;
            *)
                echo "DEB_ARCH=${{ matrix.architecture }}" >> $GITHUB_ENV
                echo "CROSS_TRIPLE=${{ matrix.architecture }}-linux-gnu" >> $GITHUB_ENV
                ;;
        esac

    - name: Set up cross toolchain and emulator.
      if: steps.cross.outcome != 'skipped'
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev qemu-user meson gcc-$CROSS_TRIPLE g++-$CROSS_TRIPLE pkg-config-$CROSS_TRIPLE
        sudo mkdir /etc/qemu-binfmt
        sudo ln -s /usr/$CROSS_TRIPLE /etc/qemu-binfmt/${{ matrix.architecture }}
        /usr/share/meson/debcrossgen --arch $DEB_ARCH -o ${{ matrix.architecture }}.ini
        sed -i "/^\[binaries\]/a exe_wrapper = 'qemu-${{ matrix.architecture }}'" ${{ matrix.architecture }}.ini
        sudo apt-get remove -y meson
        echo "MESON_CROSS_ARG=--cross-file ${{ matrix.architecture }}.ini" >> $GITHUB_ENV
        echo "CC=$CROSS_TRIPLE-gcc" >> $GITHUB_ENV
        echo "CXX=$CROSS_TRIPLE-g++" >> $GITHUB_ENV

    - name: Configure.
      run: ci/configure.sh build $MESON_CROSS_ARG

    - name: Build.
      run: ci/build.sh build

    - name: Test.
      id: test
      run: ci/test.sh build

    - name: Upload failed logs.
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: Test logs
        path: build/meson-logs/
